#+TITLE: Title Template for Degree Project
#+SUBTITLE: SUBTITLE - Arial 16/19pt
#+AUTHOR: Therese Kennerberg, Teo Klestrup Röijezon
# Fancy links
#+LATEX_HEADER: \usepackage{xcolor}
#+LATEX_HEADER: \hypersetup{colorlinks, linkcolor={red!50!black}, citecolor={blue!50!black}, urlcolor={blue!80!black}}
# Set up citation system
#+LATEX_HEADER: \usepackage{biblatex}
#+LATEX_HEADER: \addbibresource{piconodes.bib}
#+BEGIN_SRC emacs-lisp :results silent :exports results
  (setq org-latex-pdf-process '("latexmk -shell-escape -bibtex -pdf %f")
        org-latex-listings 'minted)
#+END_SRC

* Introduction

The goal of this project outcome is to provide a hands-on physical
pedagogical education platform for schools. The platform will be
tailored towards Skolverket's new learning outcome goals for the subjects Computational
Thinking and Programming\cite{KTek2017} (which will take effect from June 2018). The
platform is directed towards teaching parallel programming and distributed systems using a
custom assembler-like language.

* Background

The digitalization of our society is moving quickly, and we all want to keep up with it. This put a lot of pressure on the schools
to adopt programming and something called computational thinking in the education. In this process the Swedish agency of
education is making  changes to the school system to implement computational thinking weekly on several courses for students in the
age of x to z. Several countries have implemented programming in the schools and this is making the market in demand of tools to
use in the teaching process. Today the most used products for this purpose is Scratch, Micro:Bit and Code Studio but they are all focusing
on a software, abstract programming form and the market is short of products for learning how to program hardware and distributed systems.
With the digitalization the society also demand faster processes and more complex hardware. This results in computers with advanced technologies
in distributed systems and parallel programming.

** Computational thinking in the Swedish schools

The Swedish agency of education is adopting programming and computational thinking in schools and made goals for the schools to implement
it in the courses
Computational thinking is stated by Linköping's University to be
a process of problem-solving, which includes:
- Formulating a problem in such a way that it becomes possible to use computers to solve it.
- Breaking down complex problems into smaller parts.
- Finding repeating patterns and reusing them.
- Creating algorithms to automate the solution of a problem.
- Logically organizing and analyzing data.
- Represent data through abstractions such as models and simulations.
  # FIX ME: Unclear
- Identifying, analyzing  and implementing possible solutions to find the most
  effective one, through a combination of steps and resources.
- To generalize and use this kind of problem-solving process on other
  kinds of problems.

# Can't actually find these categories anywhere in HeintzMannila.., recosider removing
According to Heintz and Mannila\cite{HeintzMannila}, computing in schools should
have three key stages:

1. Years 5-6: algorithms and instructions, to create and debug simple
   programs, with a focus on logical thinking.
2. Years 7-11: Develop and debug greater problems
   with given goals and use programming concept with variables, sequences,
   selection and repetition.
   # FIX ME: Binaries?
3. Years 12-14: Two or more programming languages, Boolean logic, binaries,
   connection between the program and hardware.

This project is directed to be used by student in the ages of 14-15, fitting the
last key stage very well.
The importance of computational thinking and programming in schools is stated by Mannila and Heintz
from Linköping's university to be the problem solving processes which include describe, analyze
and state the problem in a way so computers can help solving the problem. This ability will
evolve skills in handling complex problems, perseverance when working on big problems,
tolerance for ambiguity, ability to handle open stated problems and ability to communicate
and cooperate with others https://www.ida.liu.se/~frehe08/FredrikHeintzLindaMannila-skolverket-20150302.pdf.
One important thing to consider in the process of educating computational thinking
and programming is to have very clear guidance and considerations for the teachers,
who need to understand the learning concept fully to be able to teach it.
In a inquiry made by Microsoft and CAS, 68% of the teachers is worried that the
students have more understanding for the subject then they do and that 81%
of the teachers wish for more agile training and material for the subject https://www.ida.liu.se/~frehe08/FredrikHeintzLindaMannila-skolverket-20150302.pdf.
For this reason will the project have a focus on the teachers and how to prepare them
to use the tools the platform provide. This will be in form of documents of concept,
tutorials?, ...(this might fit some where else)

*** Prior Art / Other tools for supporting computational thinking outcomes

So far, "educational" programming has mostly taken one of two tracks: "toy" languages and environments
that are designed to be visually exciting (such as Scratch\cite{Scratch}), or disposable limited computers
(see Raspberry Pi\cite{RaspberryPi} and BBC micro:bit\cite{MicroBit}).

We've tried to go in a slightly different route, inspired by Zachtronics Industries' games Shenzhen
I/O\cite{ShenzhenIO} and TIS-100\cite{TIS100}. Instead of giving them a single computer or microcontroller
for the whole project, we give them a whole bunch of /extremely/ limited microcontrollers, in order to force
them to think about splitting their projects long before a traditional approach does. To compensate for this,
we've also provided a simplified way to communicate between them, without having to worry about more complicated
concerns, such as bits, timing, and clock skew.

To differentiate from the Zachtronics games we've actually built a physical kit using these principles,
rather than just providing the user with a simulator.

** Research Questions

The study has examined the following questions:

1. How to implement the new outcomes for computational thinking presented by the Swedish Agency of Education.
2. Implementation of a platform to teach tha basics of bare metal programming to students.
3. Evaluation of the pedagogical usefulness of the platform and how to implement
   the idea to motivate students.

** Purpose

Improven the digital literacy.

** Goal

The goal with the project is to develop a basic prototype for its purpose.

*** Benefits, Ethics and Sustainability

Democracy the politic and encurage youth to learn technology.
** Methodology / Methods

# State the problem and underlying assumption.

Skolverket (the Swedish national agency for education) are about to implement new
learning outcome goals for computational thinking in June 2018. Their vision for
2020 is that every student has developed an adequate competence for digital technology
https://liu.se/cetis/konferenser/documents-tis2017/m2-3-datalogiskt-tankande.pdf).
# Try to find primary source?

The primary question for this thesis project is: "How can you implement computational thinking
for an parallel and hardware-close programming?". To try to answer this we developed a platform to
be used in schools when teaching programming. The evaluation of the platform was based on letting
school students and teachers play around with a prototype, and then letting them fill out a questionnaire
about their experience.

The question formulation in this thesis report is how can you implement computational thinking
 For the project, a platform was developed to
be used as a tool in the schools education when teaching programming and was iterative developed
during the last 3 weeks of the project from evaluation research. The evaluation of the platform was based on research
with questionnaires to the the teachers and students and feedback after they checked out the products
prototypes. The questionnaire is formed so the answers can give us a foundations for developing a
pedagogical and motivating tool the student can use to achieve the outcomes for computational thinking.

*** School Selection

Initially we wanted to feedback from as diverse a set of schools as possible, with .

*** Tools
*** Analyzing the data and procedures

*** Specific research tools and strategies

The product will have the UI designed in the browser so the user wont be fixed to one platform. This way
either a mobile phone or a laptop can be used for programming the micro-controllers. The MCU of our choice
is stm32f030f4p6. This MCU is chosen because it got enough I/Os and memory space for the application and
is reasonable cheep. This MCUs are also popular to program in Rust which make it easier to find documentation
and support. At least 8 I/O is needed. UART communication(two pins for TX and RX), communications between
the MCUs(4 pins), external clock source and coarse grained syncronization clock. A server will be provided
by Inicio which contains the drivers for communicating between the platforms and the compiler for the bytecode.

# is IDE relevant here? might be cus its restricting further development?
*** IDE and programming langueges

Rust is used to program the MCU. The MCU of our choice for the is
stm32f030f4p6. C is also an option and can be prefered
if anyone would like to use IDE such as EWARM or STM32Cube to generate
initiallisation code but is not suported by Linux. Rust is better from a safety
perspective because it is harder to read something from more then one thread
and it verifies pointers are still alive when they are used so you will not be
able to keep a pointer beyond their objects lifetime. Rust also suits very well
with our Bytecode model since our abstract sytax tree contains different legal
values depending on the instruction. Alot of different IDE can be used for Rust,
in this project we will use Emacs because both Scala program and the report is
written here.

The homepage is programmed in Scala. Scala is very practical for not changing
languege when writing the client and server. This makes it easier when communicating
between the server and client.

*** CAD and CAM tools
In the first stages of the project it is prefered to be more flexible for changes.
For this reason a breadboard and jumpingwires are used to test the design before
making the final one. The MCU-moduels is made in a router  mill so a breakout board
can be made for the MCU pins to match the breadboard. DipTrace is used for designing
and routing the PCBs. In the last stages of the project the CAD-files will be sent to
a company for producing the boards.




***** Use references!
** Delimitations (Avgränsningar, swe)
The project is limited to 2,5 month so the product will not be ready for the market in this time. This project will build up a ground for future work
so the product can be represented on the market. The prototype will be of simple sort, enough so the student can visualize the aplication of the product.
Further development and improvment will be mentioned in the chapter further opertunities. 
** Outline (Disposition)
** Use headings to break the tex
* (Engineering-related content, Methodologies and Methods) Use a self-explaining title
** Engineering-related and scientific content:
** (The work)
** (Result)
** (Conclusions)
** Further Opportunities

* References

\printbibliography
