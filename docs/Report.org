#+TITLE: Title Template for Degree Project
#+SUBTITLE: SUBTITLE - Arial 16/19pt
#+AUTHOR: Therese Kennerberg, Teo Klestrup Röijezon
# Fancy links
#+LATEX_HEADER: \usepackage{xcolor}
#+LATEX_HEADER: \hypersetup{colorlinks, linkcolor={red!50!black}, citecolor={blue!50!black}, urlcolor={blue!80!black}}
# Set up citation system
#+LATEX_HEADER: \usepackage{biblatex}
#+LATEX_HEADER: \addbibresource{piconodes.bib}
#+BEGIN_SRC emacs-lisp :results silent :exports results
  (setq org-latex-pdf-process '("latexmk -shell-escape -bibtex -pdf %f")
        org-latex-listings 'minted)
#+END_SRC

* Introduction

The goal of this project outcome is to provide a "hands on" physical
pedagogical education platform for the schools. The platform will be
tailored to the new learning outcome goals for the subjects Computational
Thinking and Programming, which will take effect from June 2018. The
platform is directed towards teaching parallel programming, using a
custom assembler-like language.

** Background

*** Computational thinking in the Swedish schools

Computational thinking is stated by Linköping's University to be
a process of problem-solving, which includes:

- Formulating a problem in such a way that it becomes possible to use computers to solve it.
- Breaking down complex problems into smaller parts.
- Finding repeating patterns and reusing them.
- Creating algorithms to automate the solution of a problem.
- Logically organizing and analyzing data.
- Represent data through abstractions such as models and simulations.
  # FIX ME: Unclear
- Identifying, analyzing, and implementing possible solutions to find the most
  effective one, through a combination of steps and resources.
- To generalize and use this kind of problem-solving process on other
  kinds of problems.

# Can't actually find these categories anywhere.. 
According to Heintz and Mannila\cite{HeintzMannila}, computing in schools should
have three key stages:

1. Years 5-6: algorithms and instructions, to create and debug simple
   programs, with a focus on logical thinking.
2. Years 7-11: Develop and debug greater problems
   with given goals and use programming concept with variables, sequences,
   selection and repetition.
   # FIX ME: Binaries?
3. Years 12-14: Two or more programming languages, boolean logic, binaries,
   connection between the program and hardware.

This project is directed to be used by student in the ages of 14-15, fitting the
last key stage very well.
The importance of computational thinking and programming in scools is stated by Mannila and Heintz
from Linköpings universitet to be the problemsolving processes which include describe, analyse
and state the problem in a way so computers can help solving the problem. This ability will
evolve skills in handling coplex problems, perseverence when working on big problems,
tolerans for ambiguity, ability to handle open stated problems and ability to communicate
and cooperate with others https://www.ida.liu.se/~frehe08/FredrikHeintzLindaMannila-skolverket-20150302.pdf.
One importans thing to consider in the process of educating computational thinking
and programming is to have very clear guidence and conciderations for the teachers,
who need to understand the learning concept fully to be able to teach it.
In a inquiry made by Microsoft and CAS, 68% of the teachers is worried that the
students have more understanding for the subject then they do and that 81%
of the teachers wish for more agile training and material for the subject https://www.ida.liu.se/~frehe08/FredrikHeintzLindaMannila-skolverket-20150302.pdf.
For this reason will the project have a focus on the teachers and how to prepare them
to use the tools the platform provide. This will be in form of documents of concept,
tutorials?, ...(this might fit some where else)

*** Other tool for supporting computational thinking outcomes

***** Use references
** Problem
*** Questions
The study have examend following question:
1. How to implement the new outcomes for computational thinking
2. Implementatin of a platform to teach students to do hardware close programming
3. Evaluation of the pedalogicalness of the platform and how you can implement
the idea to motivate students.
***** Use references
** Purpose
** Goal
*** Benefits, Ethics and Sustainability
** Methodology / Methods
State the problem and underlying assumption.
The National Agency for Education in Sweden are about to implement outcomes for
computational thinking in june 2018. Their vision for 2020, is that every student have
developed an adequate competence for digital tecnology
https://liu.se/cetis/konferenser/documents-tis2017/m2-3-datalogiskt-tankande.pdf).
The question formulation in this thesis report is how can you implement computational thinking
for an parallel and hardware close programming. For the project, a platform was developed to
be used as a tool in the scools education when teaching programming and was iterative developed
during the last 3 weeks of the project from evaluation research. The avaluation of the platform was based on research
with questionairs to the the teachers and students and feedback after they checked out the products
prototypes. The questionair is formed so the answers can give us a foundations for developing a
pedalogical and motivating tool the student can use to achieve the outcomes for computational thinking.

*** data selection

*** Tools
*** Analysing the data and procedcures
*** Specific research tools and strategies
The product will have the UI designed in the browser so the user wont be fixed to one platform. This way eather a mobilephone or a laptop can be used for programming the microcontrollers. The MCU of our choice is stm32f030f4p6. This MCU is chosen because it got enough I/Os and memoryspace for the application and is reasonable cheep. This MCUs are also popular to program in Rust which make it easier to find documentation and support. At least 8 I/O is needed. UART communication(two pins for Tx and Rx), communications between the MCUs(4 pins), external clocksource and coarsegrain syncronization clock. A server will be provided by Inicio which contains the drivers for communicating between the platforms and the compiler for the bytecode.

*** IDE and programming langueges

Rust is used to program the MCU. The MCU of our choice for the is
stm32f030f4p6. C is also an option and can be prefered
if anyone would like to use IDE such as EWARM or STM32Cube to generate
initiallisation code but is not suported by Linux. Rust is better from a safety
perspective because it is harder to read something from more then one thread
and it verifies pointers are still alive when they are used so you will not be
able to keep a pointer beyond their objects lifetime. Rust also suits very well
with our Bytecode model since our abstract sytax tree contains different legal
values depending on the instruction. Alot of different IDE can be used for Rust,
in this project we will use Emacs because both Scala program and the report is
written here.

The homepage is programmed in Scala. Scala is very practical for not changing
languege when writing the client and server. This makes it easier when communicating
between the server and client.

*** CAD and CAM tools
In the first stages of the project it is prefered to be more flexible for changes.
For this reason a breadboard and jumpingwires are used to test the design before
making the final one. The MCU-moduels is made in a router  mill so a breakout board
can be made for the MCU pins to match the breadboard. DipTrace is used for designing
and routing the PCBs.




***** Use references!
** Delimitations (Avgränsningar, swe)
** Outline (Disposition)
* (Theoretic Background) Use a self-explaining title
** Use headings to break the text
* (Engineering-related content, Methodologies and Methods) Use a self-explaining title
** Engineering-related and scientific content:
** (The work)
** (Result)
** (Conclusions)

* References

\printbibliography
