#+TITLE: Title Template for Degree Project
#+SUBTITLE: SUBTITLE - Arial 16/19pt
#+AUTHOR: Therese Kennerberg, Teo Klestrup Röijezon
# Fancy links
#+LATEX_HEADER: \usepackage{xcolor}
#+LATEX_HEADER: \hypersetup{colorlinks, linkcolor={red!50!black}, citecolor={blue!50!black}, urlcolor={blue!80!black}}
# Set up citation system
#+LATEX_HEADER: \usepackage{biblatex}
#+LATEX_HEADER: \addbibresource{piconodes.bib}
#+BEGIN_SRC emacs-lisp :results silent :exports results
  (setq org-latex-pdf-process '("latexmk -shell-escape -bibtex -pdf %f")
        org-latex-listings 'minted)
#+END_SRC

* Introduction

The goal of this project outcome is to provide a hands-on physical
pedagogical education platform for schools. The platform will be
tailored towards Skolverket's new learning outcome goals for the subjects Computational
Thinking and Programming\cite{KTek2017} (which will take effect from June 2018). The
platform is directed towards teaching parallel programming and distributed systems using a
custom assembler-like language.

* Background

The digitalization of our society is moving quickly, and we all want to keep up with it. This put a lot of pressure on the schools
to adopt programming and something called computational thinking in the education. In this process the Swedish agency of
education is making  changes to the school system to implement computational thinking weekly on several courses for students in the
age of x to z. Several countries have implemented programming in the schools and this is making the market in demand of tools to
use in the teaching process. Today the most used products for this purpose is Scratch, Micro:Bit and Code Studio but they are all focusing
on a software, abstract programming form and the market is short of products for learning how to program hardware and distributed systems.
With the digitalization the society also demand faster processes and more complex hardware. This results in computers with advanced technologies
in distributed systems and parallel programming.

** Terms and abbreviations

- MCU: Microcontroller

** Computational thinking in the Swedish schools

The Swedish agency of education is adopting programming and computational thinking in schools and made goals for the schools to implement
it in the courses
Computational thinking is stated by Linköping's University to be
a process of problem-solving, which includes:
- Formulating a problem in such a way that it becomes possible to use computers to solve it.
- Breaking down complex problems into smaller parts.
- Finding repeating patterns and reusing them.
- Creating algorithms to automate the solution of a problem.
- Logically organizing and analyzing data.
- Represent data through abstractions such as models and simulations.
  # FIX ME: Unclear
- Identifying, analyzing  and implementing possible solutions to find the most
  effective one, through a combination of steps and resources.
- To generalize and use this kind of problem-solving process on other
  kinds of problems.

# Can't actually find these categories anywhere in HeintzMannila.., recosider removing
According to Heintz and Mannila\cite{HeintzMannila}, computing in schools should
have three key stages:

1. Years 5-6: algorithms and instructions, to create and debug simple
   programs, with a focus on logical thinking.
2. Years 7-11: Develop and debug greater problems
   with given goals and use programming concept with variables, sequences,
   selection and repetition.
   # FIX ME: Binaries?
3. Years 12-14: Two or more programming languages, Boolean logic, binaries,
   connection between the program and hardware.

This project is directed to be used by student in the ages of 14-15, fitting the
last key stage very well.
The importance of computational thinking and programming in schools is stated by Mannila and Heintz
from Linköping's university to be the problem solving processes which include describe, analyze
and state the problem in a way so computers can help solving the problem. This ability will
evolve skills in handling complex problems, perseverance when working on big problems,
tolerance for ambiguity, ability to handle open stated problems and ability to communicate
and cooperate with others https://www.ida.liu.se/~frehe08/FredrikHeintzLindaMannila-skolverket-20150302.pdf.
One important thing to consider in the process of educating computational thinking
and programming is to have very clear guidance and considerations for the teachers,
who need to understand the learning concept fully to be able to teach it.
In a inquiry made by Microsoft and CAS, 68% of the teachers is worried that the
students have more understanding for the subject then they do and that 81%
of the teachers wish for more agile training and material for the subject https://www.ida.liu.se/~frehe08/FredrikHeintzLindaMannila-skolverket-20150302.pdf.
For this reason will the project have a focus on the teachers and how to prepare them
to use the tools the platform provide. This will be in form of documents of concept,
tutorials?, ...(this might fit some where else)

*** Prior Art / Other tools for supporting computational thinking outcomes

So far, "educational" programming has mostly taken one of two tracks: "toy" languages and environments
that are designed to be visually exciting (such as Scratch\cite{Scratch}), or disposable limited computers
(see Raspberry Pi\cite{RaspberryPi} and BBC micro:bit\cite{MicroBit}).

We've tried to go in a slightly different route, inspired by Zachtronics Industries' games Shenzhen
I/O\cite{ShenzhenIO} and TIS-100\cite{TIS100}. Instead of giving them a single computer or microcontroller
for the whole project, we give them a whole bunch of /extremely/ limited microcontrollers, in order to force
them to think about splitting their projects long before a traditional approach does. To compensate for this,
we've also provided a simplified way to communicate between them, without having to worry about more complicated
concerns, such as bits, timing, and clock skew.

To differentiate from the Zachtronics games we've actually built a physical kit using these principles,
rather than just providing the user with a simulator.

** Real-time systems

** Research Questions

The study has examined the following questions:

1. How to implement the new outcomes for computational thinking presented by the Swedish Agency of Education.
2. Implementation of a platform to teach tha basics of bare metal programming to students.
3. Evaluation of the pedagogical usefulness of the platform and how to implement
   the idea to motivate students.

** Purpose

Improven the digital literacy.

** Goal

The goal with the project is to develop a basic prototype for its purpose.

*** Benefits, Ethics and Sustainability

Democracy the politic and encurage youth to learn technology.

* Method

# State the problem and underlying assumption.

Skolverket (the Swedish national agency for education) are about to implement new
learning outcome goals for computational thinking in June 2018. Their vision for
2020 is that every student has developed an adequate competence for digital technology
https://liu.se/cetis/konferenser/documents-tis2017/m2-3-datalogiskt-tankande.pdf).
# Try to find primary source?

The primary question for this thesis project is: "How can you teach computational thinking in a context
of parallel bare-metal programming?". To try to answer this we developed a platform to
be used in schools when teaching programming. The evaluation of the platform was based on letting
school students and teachers play around with a prototype, and then letting them fill out a questionnaire
about their experience.

** School Selection

Initially we wanted to feedback from as diverse a set of schools as possible, with respect to facets such as
household income and prior experience in the field.

However, due to limited interest from schools we only got to try it with students in relatively wealthy areas,
who had already signed up for optional "tech" classes.

** Tools

*** Microcontrollers

We chose to base our system around STMicrolectronics' STM32F030\cite{stm32f030} series of microcontrollers. We made
this choice because it was contains both the very cheap F4P6 chip, as well as the beefier but compatible C8T6 which
we used for debugging our software. The whole series also offered enough peripherals for our needs (primarily, a
software-controlled timer and a single UART channel).

As a bonus we also both had experience with the STM32 lineup from earlier projects.

For our downloader unit we used the ESP32 microcontroller, because it has a relatively large developer community,
plenty of resources, and a built-in Wi-Fi transceiver. Cost was also a far smaller problem here, since we need much
smaller quantities of these. ST also has a few Wi-Fi-capable chips, but they are all marked Not Recommended for New
Designs.

# is IDE relevant here? might be cus its restricting further development?
*** Programming Languages

We used Rust to program the Node MCUs. This was both because of Rust's improved safety features over C (such as pointers
with limited lifetimes, and move semantics), as well as the improved type system.

For example, the support for tagged unions (also known as algebraic data types or sum types) allowed us to represent our
PicoTalk state machines without needing either a lot of repeated states (~Blah1~, ~Blah2~, ~Blah3~), or manually reinterpreting
variables depending on the current state.

We used C for programming the downloader, because the ESP32 MCU is based on the rather uncommon Xtensa architecture, which
LLVM (used by the Rust compiler) does not support. This wasn't as much of a hindrance, since the downloader is mostly responsible
for relaying messages between the server and the connected node.

The website was developed using Scala for both the front- and backend. This was very useful to keep the codebases consistent, and
helped avoid of code repetition when defining view models, for example. In theory it would also have been nice to stay consistent
with the MCUs, but because of the resource constraints we wouldn't have been able to share as much code anyway.

*** PCB design

We started out prototyping using solderless breadboards and jumper cables, so that we would have more flexibility when changing
plans. However, since our MCUs are SMD-based we still had to mill our breakout boards. We also designed a "debug" board for
the STM32F030C8T6, with the same pinout as the STM32F030F4P6 that we were using as our design target.

Once we were happy with our design we made a more formal design in our CAD program KiCad. Finally we milled our PCBs using our
lab's LPKF ProtoMat mill.

** Delimitations (Avgränsningar, swe)
The project is limited to 2,5 month so the product will not be ready for the market in this time. This project will build up a ground for future work
so the product can be represented on the market. The prototype will be of simple sort, enough so the student can visualize the aplication of the product.
Further development and improvment will be mentioned in the chapter further opertunities.
** Outline (Disposition)
** Use headings to break the tex
* (Engineering-related content, Methodologies and Methods) Use a self-explaining title
** Engineering-related and scientific content:
** (The work)
** (Result)
** (Conclusions)
** Further Opportunities

* References

\printbibliography
